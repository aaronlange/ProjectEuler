/*
Problem:

Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
*/

/*
Solution:

(Sieve method doesn't work--numbers become too sparse and I run out of memory)

(Generating the numbers in their own arrays doesn't work because again I run out of memory)

The idea is to generate the next hex number, then for this hex number iteratively generate the next tri/pent numbers while they don't
exceed the current hex number. If we get a match, make a note of it. Repeat this process.

The complexity of this algorithm is O(n), where n is the number of hexagonal numbers generated.
The memory used is O(1).
*/ 

public class Problem45 {
    public static void main(String[] args) {
	int max_n = 10000000;

	int triangleNumber = 1;
	int triN = 2;
	int pentagonalNumber = 1;
	int pentN = 2;
	int hexagonalNumber = 1;
	int hexN = 2;
	int matchesCount = 0;
	while(matchesCount < 2) {
	    hexagonalNumber = hexagonalNumber + 4*hexN - 3;
	    //System.out.println("**********h"+hexN+"="+hexagonalNumber);
	    hexN++;
	    while(triangleNumber <= hexagonalNumber) {
		if(triangleNumber == hexagonalNumber) {
		    while(pentagonalNumber <= hexagonalNumber) {
			if(pentagonalNumber == hexagonalNumber) {
			    System.out.println(hexagonalNumber + " is a winner!");
			    matchesCount++;
			}
			pentagonalNumber = pentagonalNumber + 3*pentN -2;
			//System.out.println("*****p"+pentN+"="+pentagonalNumber);
			pentN++;
		    }
		}
		triangleNumber = triangleNumber + triN;
		//System.out.println("t"+triN+"="+triangleNumber);
		triN++;
	    }
	}
    }
}
