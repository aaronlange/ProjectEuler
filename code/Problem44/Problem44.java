
/*
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
*/

import java.util.*;

public class Problem44 {
    public static void main(String[] args) {

	/* Generate the first n pentagonal numbers. If failure, then it's possible we need more numbers */
	int n = 1000000;
	int[] pentagonals = new int[n];
	for(int i = 0; i < pentagonals.length; i++) {
	    pentagonals[i] = (i+1)*(3*i + 2)/2;
	    //System.out.println(pentagonals[i]);
	}

	/* find the minimum difference, start with the biggest value, for comparison purposes */
	int minDifference = pentagonals[pentagonals.length-1];
	System.out.println("Set minimum at " + minDifference);
	for(int i = 1; i < pentagonals.length; i++) {
	    /* if the difference between this and the previous pentagonal is greater than the minimum,
	       we must have found the minimum */
	    if(pentagonals[i] - pentagonals[i-1] > minDifference) {
		System.out.println("min difference is " + minDifference);
		System.exit(0);
	    }
	    /* otherwise, test the i-th pentagonal with the previous ones */
	    int currentSearchPoint = 0; // index at which to start searching for the sum/difference
	    for(int j = i-1; j >=0; j--) {
		int pentagonalSum = pentagonals[i] + pentagonals[j];
		int pentagonalDifference = pentagonals[i] - pentagonals[j];
		//System.out.println("for ith=" + pentagonals[i] + " and jth=" + pentagonals[j] + " sum is " + pentagonalSum + " and difference is " + pentagonalDifference);

		/* if difference is bigger than the minimum, there's no point in searching further with this i-th pentagonal */
		if(pentagonalDifference > minDifference) {
		    break;
		} 

		/* check whether the sum is pentagonal */
		boolean sumIsPentagonal = false;
		for(int k = i+1; (k < pentagonals.length) && (pentagonals[k] <= pentagonalSum); k++) {
		    if(pentagonalSum == pentagonals[k]) {
			sumIsPentagonal = true;
			//System.out.println("sum is pentagonal for i="+i+" and j="+j);
			break;
		    }
		}


		boolean differenceIsPentagonal = false;
		if(sumIsPentagonal) {
		    /* check whether the difference is pentagonal */
		    for(int k = currentSearchPoint; pentagonals[k] <= pentagonalDifference; k++) {
			if(pentagonalDifference == pentagonals[k]) {
			    differenceIsPentagonal = true;
			    System.out.println("difference is pentagonal for i="+i+" and j="+j);
			    currentSearchPoint = k;
			    break;
			}
		    }
		}
		
		if((sumIsPentagonal && differenceIsPentagonal) && pentagonalDifference < minDifference) {
		    minDifference = pentagonalDifference;
		    System.out.println("minumum reset to " + minDifference);
		}
		if(currentSearchPoint >= j) break;

	    }
	}
	System.out.println("No minimum found.");

    }

}

